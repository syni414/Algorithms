package tp1;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;
import java.util.Random;
import java.util.LinkedList;
import java.util.List;


public class TriFusionVar {

	public static void main(String[] args) {
		/**compare complexity of 4 variants of merge sort*/	
		
		//donne la taille des donnees
		Scanner scan = new Scanner(System.in);
		int n = 0;
		System.out.println("donner la taille n du tableau/liste");
		if(scan.hasNextInt()) {
			n = scan.nextInt();
		}
		System.out.println(n);
		
		//creation du premier tableau avec des entiers al√©atoires de 1-100
		ArrayList<Integer> tableau1 = new ArrayList<Integer>();
		Random random = new Random();
		for(int i=0; i<n; i++) {
			Integer a = Integer.valueOf(random.nextInt(100));
			tableau1.add(a);
		}
		
		//clone tableau
		ArrayList<Integer> tableau2 = cloneArray(tableau1);
		affiche(tableau2);	
		
		//clone listes
		LinkedList<Integer> liste1 = cloneListe(tableau1);
		LinkedList<Integer> liste2 = cloneListe(tableau1);
		
/*		//affichage du tableau
		affiche(tableau1);
		affiche(liste1);
		affiche(liste2);*/
		
		scan.close();
	}
	
	
	
	//procedure copie tableau -> tableau
	public static ArrayList<Integer> cloneArray(List<Integer> source) {
		ArrayList<Integer> tableau2 = new ArrayList<Integer>();
		for(Integer val: source) {
			tableau2.add(Integer.valueOf((val.intValue())));
		}
		return tableau2;
	}
	
	//procedure copie tableau -> Liste chainee
	public static LinkedList<Integer> cloneListe(List<Integer> source) {
		LinkedList<Integer> liste1 = new LinkedList<Integer>();
		for(Integer val: source) {
			liste1.add(Integer.valueOf((val.intValue())));
		}
		return liste1;
	}
	
	//affiche tous les elements
	public static void affiche(List<Integer> desElements) {
		Iterator<Integer> iteTab1 = desElements.iterator();
		while(iteTab1.hasNext()) {
			System.out.println( iteTab1.next() + " ");
		}
	}
/*	
	//Variante 1: Tri tableau avec copie
	public static void SortTabCopy(ArrayList<Integer> source) {
		
	}
	
	//Variante 2: Tri tableau sans copie
	public static void SortTabNoCopy(ArrayList<Integer> source) {
		
	}	
	
	//Variante 3: Tri liste avec copie
	public static void SortListCopy(ArrayList<Integer> source) {
		
	}	
	
	//Variante 4: Tri liste sans copie
	public static void SortListNoCopy(ArrayList<Integer> source) {
		
	}	
	*/
}























