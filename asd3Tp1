package Tri_fusion;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;
import java.util.Random;


public class TriFusionVar {

	public static void main(String[] args) {
		/**compare complexity of 4 variants of merge sort*/	
		
		//donne la taille des donnees
		Scanner scan = new Scanner(System.in);
		int n = 0;
		System.out.println("donner la taille n du tableau/liste");
		if(scan.hasNextInt()) {
			n = scan.nextInt();
		}
		System.out.println(n);
		
		//creation du premier tableau avec des entiers al√©atoires de 1-100
		Random random = new Random();
		Integer[] tableau1 = new Integer[n];
		for(int i = 0; i<n; i++) {
			tableau1[i] = random.nextInt(100);
		}
		
		//clone tableau
		Integer[] tableau2 = cloneTable(tableau1,0,tableau1.length-1);
		
		//clone listes		
		ArrayList<Integer> liste1 = cloneListe(tableau1);
//		ArrayList<Integer> liste2 = cloneListe(tableau1);
		

		//affichage du tableau
		afficheTab(tableau1);
		afficheListe(liste1);

		//tri par variante
			//tri sans copie
		sortListNoCopy(liste1);
		afficheListe(liste1);
		
		sortTabNoCopy(tableau1);
		afficheTab(tableau1);

			//tri avec copie
		Integer []tableau2tri = sortTabCopy(tableau2);
		afficheTab(tableau2tri);
		
		scan.close();
	}
	
	
	
	//procedure copie tableau -> tableau
	public static Integer[] cloneTable(Integer []source, int inf, int sup) {
		int n = sup-inf+1;
		Integer[] tableau2 = new Integer[n];
		for(int i = 0; i<n; i++) {
			tableau2[i] = source[inf];
			inf++;
		}
		return tableau2;
	}
	
	//procedure copie tableau -> Liste
	public static ArrayList<Integer> cloneListe(Integer []source) {
		ArrayList<Integer> liste1 = new ArrayList<Integer>();
		for(Integer val: source) {
			liste1.add(val);
		}
		return liste1;
	}

	//affiche tous les elements d'un tableau
	public static void afficheTab(Integer []source) {
		for(int i = 0; i<source.length; i++) {
			System.out.print(source[i] + " ");
		}
		System.out.println();
	}
	
	//affiche tous les elements d'une liste
	public static void afficheListe(ArrayList<Integer> desElements) {
		Iterator<Integer> iteTab1 = desElements.iterator();
		while(iteTab1.hasNext()) {
			System.out.print( iteTab1.next() + " ");
		}
		System.out.println();
	}
		
	//Variante 1: Tri tableau avec copie
	public static Integer[] sortTabCopy(Integer []source) {
		return sortTabCopyAux(source);
	}
		
	//Variante 2: Tri tableau sans copie
	public static void sortTabNoCopy(Integer []source) {
		sortTabNoCopyAux(source, 0, source.length-1);
	}	
	
	//Variante 3: Tri liste avec copie
	public static void sortListCopy(ArrayList<Integer> source) {
		
	}	

	//Variante 4: Tri liste sans copie
	public static void sortListNoCopy(ArrayList<Integer> source) {
		sortListNoCopyAux(source, 0, source.size()-1);
	}	
	
	
	//tri fusion tableau avec copie
	public static Integer [] sortTabCopyAux(Integer []source) {
		if(source.length == 1) {
			return source;
		}
		
		int mid = source.length/2;
		Integer [] sousTab1= new Integer[mid];
		for(int i=0; i<mid; i++) {
			sousTab1[i] = source[i];
		}

		Integer [] sousTab2=new Integer[source.length- mid];
		for(int i=0; i<source.length-mid; i++) {
			sousTab2[i] = source[mid+i];
		}		
		
		return mergeTabCopy(sortTabCopyAux(sousTab1), sortTabCopyAux(sousTab2));
	}
	
	
	public static Integer[] mergeTabCopy(Integer []s1, Integer []s2) {
		Integer []tabFusion = new Integer[s1.length+s2.length];
		int left = 0;
		int right = 0;
		int itTab = 0;
		
		while(left <= s1.length-1 && right <= s2.length-1) {
			if(s1[left] <= s2[right]) {
				tabFusion[itTab] = s1[left];
				left++;
			}else {
				tabFusion[itTab] = s2[right];
				right++;
			}
			itTab++;
		}

		while (left <= s1.length-1) {
			tabFusion[itTab] = s1[left];
			left++;
			itTab++;
		}
		
		while (right <= s2.length-1) {
			tabFusion[itTab] = s2[right];
			right++;
			itTab++;
		}		
		
		afficheTab(tabFusion);
		
		return tabFusion;
	}
	
	
	
	//tri fusion tableau sans copie: on separe le tableau
	public static void sortTabNoCopyAux(Integer []source, int inf, int sup) {
		if(inf >= sup) 
			return;
		
		int mid = (inf + sup)/2;
		
		sortTabNoCopyAux(source, inf, mid);
		sortTabNoCopyAux(source, mid+1, sup);
		mergeTabNoCopy(source, inf, mid, sup);		
	}
	
	//tri fusion tableau sans copie: on reunit les tableaux
	public static void mergeTabNoCopy(Integer []source, int inf,int mid, int sup) {
		Integer []temp = new Integer[sup-inf+1];
		int itLeft = inf;
		int itRight = mid+1;
		int itCopy = inf;
		int itTemp = 0;
		
		while(itLeft <= mid && itRight <= sup) {
			if( source[itLeft].compareTo(source[itRight]) <= 0 ) {
				temp[itTemp] = source[itLeft];
				itLeft++;
			}else {
				temp[itTemp] = source[itRight];
				itRight++;
			}
			itTemp++;
		}
		
		while(itLeft <= mid) {
			temp[itTemp] = source[itLeft];
			itLeft++;
			itTemp++;
		}
		
		while(itRight <= sup) {
			temp[itTemp] = source[itRight];
			itRight++;
			itTemp++;
		}
		
		for(int i = 0; i <= temp.length-1; i++) {
			source[itCopy] = temp[i];
			itCopy++;
		}		
	}	
	
	//tri fusion liste sans copie: on separe la liste
	public static void sortListNoCopyAux(ArrayList<Integer> source, int inf, int sup) {
		if(inf >= sup) 
			return;
		
		int mid = (inf + sup)/2;
		
		sortListNoCopyAux(source, inf, mid);
		sortListNoCopyAux(source, mid+1, sup);
		mergeListNoCopy(source, inf, mid, sup);
	}
	
	//tri fusion liste sans copie: on reunit les listes
	public static void mergeListNoCopy(ArrayList<Integer> source, int inf,int mid, int sup) {
		ArrayList<Integer> temp = new ArrayList<>();
		int itLeft = inf;
		int itRight = mid+1;
		int itCopy = inf;
		
		while(itLeft <= mid && itRight <= sup) {
			if( source.get(itLeft).compareTo(source.get(itRight)) <= 0 ) {
				temp.add(source.get(itLeft));
				itLeft++;
			}else {
				temp.add(source.get(itRight));
				itRight++;
			}
		}
		
		while(itLeft <= mid) {
			temp.add(source.get(itLeft));
			itLeft++;
		}
		
		while(itRight <= sup) {
			temp.add(source.get(itRight));
			itRight++;
		}
		
		for(int i = 0; i<= temp.size()-1; i++) {
			source.set(itCopy, temp.get(i));
			itCopy++;
		}
	}
}
